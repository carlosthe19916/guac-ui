import React from "react";
import { NavLink } from "react-router-dom";

import {
  ConditionalTableBody,
  useClientTableBatteries,
} from "@mturley-latest/react-table-batteries";

import { RENDER_DATE_FORMAT } from "@app/Constants";
import dayjs from "dayjs";
import { useFetchAdvisoryByCveId } from "@app/queries/advisories";
import { RHSeverityShield } from "@app/components/csaf/rh-severity";

interface RelatedAdvisoriesProps {
  cveId: string;
}

export const RelatedAdvisories: React.FC<RelatedAdvisoriesProps> = ({
  cveId,
}) => {
  const { advisories, isFetching, fetchError } = useFetchAdvisoryByCveId(cveId);

  const tableControls = useClientTableBatteries({
    persistTo: "sessionStorage",
    idProperty: "id",
    items: advisories || [],
    isLoading: isFetching,
    columnNames: {
      id: "ID",
      title: "Title",
      agregatedSeverity: "Aggregated severity",
      revision: "Revision",
      vulnerabilities: "Vulnerabilities",
    },
    hasActionsColumn: true,
    filter: {
      isEnabled: true,
      filterCategories: [],
    },
    sort: {
      isEnabled: true,
      sortableColumns: [],
    },
    pagination: { isEnabled: true },
    expansion: {
      isEnabled: false,
      variant: "single",
      persistTo: "state",
    },
  });

  const {
    currentPageItems,
    numRenderedColumns,
    components: {
      Table,
      Thead,
      Tr,
      Th,
      Tbody,
      Td,
      Toolbar,
      FilterToolbar,
      PaginationToolbarItem,
      Pagination,
    },
    expansion: { isCellExpanded, setCellExpanded },
  } = tableControls;

  return (
    <>
      {/* <Toolbar>
        <ToolbarContent>
          <FilterToolbar id="related-products-toolbar" />
          <PaginationToolbarItem>
            <Pagination
              variant="top"
              isCompact
              widgetId="related-products-pagination-top"
            />
          </PaginationToolbarItem>
        </ToolbarContent>
      </Toolbar> */}

      <Table
        aria-label="Related advisories table"
        className="vertical-aligned-table"
      >
        <Thead>
          <Tr isHeaderRow>
            <Th columnKey="id" />
            <Th columnKey="title" />
            <Th columnKey="agregatedSeverity" />
            <Th columnKey="revision" />
            <Th columnKey="vulnerabilities" />
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={false}
          isError={!!fetchError}
          isNoData={advisories?.length === 0}
          numRenderedColumns={numRenderedColumns}
        >
          <Tbody>
            {currentPageItems?.map((item, rowIndex) => {
              return (
                <Tr key={item.id} item={item} rowIndex={rowIndex}>
                  <Td width={15} columnKey="id">
                    <NavLink to={`/advisories/${item.id}`}>{item.id}</NavLink>
                  </Td>
                  <Td width={40} modifier="truncate" columnKey="title">
                    {item.title}
                  </Td>
                  <Td
                    width={15}
                    modifier="truncate"
                    columnKey="agregatedSeverity"
                  >
                    <RHSeverityShield value={item.severity} />
                  </Td>
                  <Td width={15} modifier="truncate" columnKey="revision">
                    {dayjs(item.date as any).format(RENDER_DATE_FORMAT)}
                  </Td>
                  <Td
                    width={15}
                    modifier="truncate"
                    columnKey="vulnerabilities"
                  >
                    {item.cves.length}
                  </Td>
                </Tr>
              );
            })}
          </Tbody>
        </ConditionalTableBody>
      </Table>
      <Pagination
        variant="bottom"
        isCompact
        widgetId="related-products-pagination-bottom"
      />
    </>
  );
};
