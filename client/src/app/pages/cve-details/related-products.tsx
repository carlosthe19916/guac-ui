import React, { useMemo } from "react";
import { NavLink } from "react-router-dom";
import { AxiosError } from "axios";
import dayjs from "dayjs";

import { Label, Skeleton } from "@patternfly/react-core";
import {
  ExpandableRowContent,
  IExtraData,
  IRowData,
  Td as PFTd,
  Tr as PFTr,
  Table,
  Tbody,
  Th,
  Thead,
} from "@patternfly/react-table";

import { RENDER_DATE_FORMAT } from "@app/Constants";
import { ProductCveStatus, SbomIndexed } from "@app/api/models";
import { useFetchCveRelatedProducts } from "@app/queries/cves";
import { useFetchSbomIndexedByUId } from "@app/queries/sboms";
import {
  ConditionalTableBody,
  useClientTableBatteries,
} from "@mturley-latest/react-table-batteries";
import { PackageURL } from "packageurl-js";

interface TableData {
  sbomUid: string;
  status: ProductCveStatus;
  packages: {
    purl: string;
    type: string;
  }[];
}

interface RelatedProductsProps {
  cveId: string;
}

export const RelatedProducts: React.FC<RelatedProductsProps> = ({ cveId }) => {
  const { relatedProducts, isFetching, fetchError } =
    useFetchCveRelatedProducts(cveId);

  const tableData = useMemo(() => {
    return Object.entries(relatedProducts?.products || {}).flatMap(([k, v]) => {
      return Object.entries(v).map(([sbomUid, packages]) => {
        const result: TableData = {
          status: k as ProductCveStatus,
          sbomUid,
          packages,
        };
        return result;
      });
    });
  }, [relatedProducts]);

  const tableControls = useClientTableBatteries({
    persistTo: "sessionStorage",
    idProperty: "sbomUid",
    items: tableData,
    isLoading: isFetching,
    columnNames: {
      name: "Name",
      version: "Version",
      status: "Status",
      dependencies: "Dependencies",
      supplier: "Supplier",
      createdOn: "Created on",
    },
    hasActionsColumn: true,
    filter: {
      isEnabled: true,
      filterCategories: [],
    },
    sort: {
      isEnabled: true,
      sortableColumns: [],
    },
    pagination: { isEnabled: true },
    expansion: {
      isEnabled: true,
      variant: "compound",
      persistTo: "state",
    },
  });

  const {
    currentPageItems,
    numRenderedColumns,
    components: {
      Table,
      Thead,
      Tr,
      Th,
      Tbody,
      Td,
      Toolbar,
      FilterToolbar,
      PaginationToolbarItem,
      Pagination,
    },
    expansion: { isCellExpanded, setCellExpanded },
  } = tableControls;

  return (
    <>
      {/* <Toolbar>
        <ToolbarContent>
          <FilterToolbar id="related-products-toolbar" />
          <PaginationToolbarItem>
            <Pagination
              variant="top"
              isCompact
              widgetId="related-products-pagination-top"
            />
          </PaginationToolbarItem>
        </ToolbarContent>
      </Toolbar> */}

      <Table
        aria-label="Related products table"
        className="vertical-aligned-table"
      >
        <Thead>
          <Tr isHeaderRow>
            <Th columnKey="name" />
            <Th columnKey="version" />
            <Th columnKey="status" />
            <Th columnKey="dependencies" />
            <Th columnKey="supplier" />
            <Th columnKey="createdOn" />
          </Tr>
        </Thead>
        <ConditionalTableBody
          isLoading={false}
          isError={!!fetchError}
          isNoData={tableData.length === 0}
          numRenderedColumns={numRenderedColumns}
        >
          {currentPageItems?.map((item, rowIndex) => {
            return (
              <Tbody key={item.sbomUid} isExpanded={isCellExpanded(item)}>
                <Tr key={item.sbomUid} item={item} rowIndex={rowIndex}>
                  <TdWrapper sbom_uid={item.sbomUid}>
                    {(sbom, isFetching, fetchError) => (
                      <>
                        {isFetching ? (
                          <PFTd width={100} colSpan={4}>
                            <Skeleton />
                          </PFTd>
                        ) : (
                          <>
                            <Td width={20} columnKey="name">
                              <NavLink to={`/sboms/${sbom?.id}`}>
                                {sbom?.name}
                              </NavLink>
                            </Td>
                            <Td
                              width={15}
                              modifier="truncate"
                              columnKey="version"
                            >
                              {sbom?.version}
                            </Td>
                            <Td columnKey="status">
                              <Label>{item.status}</Label>
                            </Td>
                            <Td
                              width={15}
                              modifier="truncate"
                              columnKey="dependencies"
                              compoundExpand={{
                                isExpanded: isCellExpanded(
                                  item,
                                  "dependencies"
                                ),
                                onToggle: (
                                  event: React.MouseEvent,
                                  rowIndex: number,
                                  colIndex: number,
                                  isOpen: boolean,
                                  rowData: IRowData,
                                  extraData: IExtraData
                                ) => {
                                  setCellExpanded({
                                    item,
                                    isExpanding: !isOpen,
                                    columnKey: "dependencies",
                                  });
                                },
                              }}
                            >
                              {item.packages.length}
                            </Td>
                            <Td
                              width={15}
                              modifier="truncate"
                              columnKey="dependencies"
                            >
                              {sbom?.supplier}
                            </Td>
                            <Td
                              width={15}
                              modifier="truncate"
                              columnKey="createdOn"
                            >
                              {sbom
                                ? dayjs(sbom.created as any).format(
                                    RENDER_DATE_FORMAT
                                  )
                                : ""}
                            </Td>
                          </>
                        )}
                      </>
                    )}
                  </TdWrapper>
                </Tr>
                {isCellExpanded(item) ? (
                  <PFTr isExpanded>
                    <PFTd colSpan={7}>
                      <ExpandableRowContent>
                        {isCellExpanded(item, "dependencies") && (
                          <DependenciesTable packages={item.packages} />
                        )}
                      </ExpandableRowContent>
                    </PFTd>
                  </PFTr>
                ) : null}
              </Tbody>
            );
          })}
        </ConditionalTableBody>
      </Table>
      <Pagination
        variant="bottom"
        isCompact
        widgetId="related-products-pagination-bottom"
      />
    </>
  );
};

const TdWrapper = ({
  sbom_uid,
  children,
}: {
  sbom_uid: string;
  children: (
    sbom: SbomIndexed | undefined,
    isFetching: boolean,
    fetchError: AxiosError
  ) => React.ReactNode;
}) => {
  const { sbom, isFetching, fetchError } = useFetchSbomIndexedByUId(sbom_uid);
  return children(sbom, isFetching, fetchError);
};

const DependenciesTable = ({
  packages,
}: {
  packages: { purl: string; type: string }[];
}) => {
  const tableData = useMemo(() => {
    return packages.map((e) => {
      let pkg;
      try {
        pkg = PackageURL.fromString(e.purl);
      } catch (e) {
        console.log(e);
      }

      return {
        ...e,
        pkg,
      };
    });
  }, [packages]);
  return (
    <Table aria-label="Dependencies table" variant="compact">
      <Thead>
        <PFTr>
          <Th width={10}>Type</Th>
          <Th width={15}>Namespace</Th>
          <Th width={15}>Name</Th>
          <Th width={15}>Version</Th>
          <Th width={15}>Path</Th>
          <Th width={20}>Qualifiers</Th>
          <Th width={10}>Dependency tree position</Th>
        </PFTr>
      </Thead>
      <Tbody>
        {tableData.map((item, index) => (
          <PFTr key={index}>
            <PFTd>{item.pkg?.type}</PFTd>
            <PFTd>{item.pkg?.namespace}</PFTd>
            <PFTd>{item.pkg?.name}</PFTd>
            <PFTd>{item.pkg?.version}</PFTd>
            <PFTd>{item.pkg?.subpath}</PFTd>
            <PFTd>
              {Object.entries(item.pkg?.qualifiers || {}).map(
                ([k, v], index) => (
                  <Label key={index} isCompact>{`${k}=${v}`}</Label>
                )
              )}
            </PFTd>
            <PFTd>{item.type}</PFTd>
          </PFTr>
        ))}
      </Tbody>
    </Table>
  );
};
