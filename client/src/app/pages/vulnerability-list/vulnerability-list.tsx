import React from "react";
import { NavLink } from "react-router-dom";

import {
  DescriptionList,
  DescriptionListDescription,
  DescriptionListGroup,
  DescriptionListTerm,
  List,
  ListItem,
  PageSection,
  PageSectionVariants,
  Text,
  TextContent,
  ToolbarContent,
} from "@patternfly/react-core";
import {
  ExpandableRowContent,
  Td as PFTd,
  Tr as PFTr,
} from "@patternfly/react-table";

import { PackageVersion, VulnerabilityID } from "@app/api/models";
import { useFetchPackages } from "@app/queries/packages";
import {
  ConditionalTableBody,
  FilterType,
  useClientTableBatteries,
} from "@carlosthe19916-latest/react-table-batteries";
import { useFetchVulnerabilities } from "@app/queries/vulnerabilities";

interface TableData extends VulnerabilityID {
  type: string;
}

export const VulnerabilityList: React.FC = () => {
  const { isFetching, vulnerabilities, fetchError } = useFetchVulnerabilities();

  const tableData = React.useMemo(() => {
    return vulnerabilities.flatMap((p) => {
      const type = p.type;

      return p.vulnerabilityIDs.flatMap((vulnerabilityId) => {
        const data: TableData = {
          ...vulnerabilityId,
          type,
        };

        return data;
      });
    });
  }, [vulnerabilities]);

  const vulnerabilityTypes = React.useMemo(() => {
    return vulnerabilities.flatMap((p) => {
      return p.type;
    });
  }, [vulnerabilities]);

  const tableState = useClientTableBatteries({
    persistTo: "state",
    idProperty: "id",
    items: tableData,
    isLoading: isFetching,
    columnNames: {
      id: "Id",
      type: "Type",
      vulnerabilityID: "Vulnerability ID",
    },
    filter: {
      isEnabled: true,
      filterCategories: [
        {
          key: "filterText",
          title: "Filter text",
          placeholderText: "Search",
          type: FilterType.search,
          getItemValue: (item) => item.vulnerabilityID || "",
        },
        {
          key: "type",
          title: "Type",
          placeholderText: "Type",
          type: FilterType.multiselect,
          selectOptions: vulnerabilityTypes.map((e) => ({ key: e, value: e })),
        },
      ],
    },
    sort: {
      isEnabled: true,
      sortableColumns: ["id", "type", "vulnerabilityID"],
      getSortValues: (item) => ({
        id: item.id,
        type: item.type,
        vulnerabilityID: item.vulnerabilityID,
      }),
    },
    pagination: { isEnabled: true },
    expansion: {
      isEnabled: true,
      variant: "single",
    },
  });

  const {
    currentPageItems,
    numRenderedColumns,
    components: {
      Table,
      Thead,
      Tr,
      Th,
      Tbody,
      Td,
      Toolbar,
      FilterToolbar,
      PaginationToolbarItem,
      Pagination,
    },
    expansion: { isCellExpanded },
  } = tableState;

  return (
    <>
      <PageSection variant={PageSectionVariants.light}>
        <TextContent>
          <Text component="h1">Vulnerabilities</Text>
        </TextContent>
      </PageSection>
      <PageSection>
        <div
          style={{
            backgroundColor: "var(--pf-v5-global--BackgroundColor--100)",
          }}
        >
          <Toolbar>
            <ToolbarContent>
              <FilterToolbar
                id="Vulnerability-toolbar"
                {...{ showFiltersSideBySide: true }}
              />
              <PaginationToolbarItem>
                <Pagination
                  variant="top"
                  isCompact
                  widgetId="vulnerability-pagination-top"
                />
              </PaginationToolbarItem>
            </ToolbarContent>
          </Toolbar>

          <Table aria-label="Vulnerabilities details table">
            <Thead>
              <Tr isHeaderRow>
                <Th columnKey="id" />
                <Th columnKey="type" />
                <Th columnKey="vulnerabilityID" />
              </Tr>
            </Thead>
            <ConditionalTableBody
              isLoading={isFetching}
              isError={!!fetchError}
              isNoData={tableData.length === 0}
              numRenderedColumns={numRenderedColumns}
            >
              {currentPageItems?.map((item, rowIndex) => {
                return (
                  <Tbody key={item.id}>
                    <Tr item={item} rowIndex={rowIndex}>
                      <Td width={10} columnKey="id">
                        <NavLink to={`/vulnerabilities/${item.id}`}>
                          {item.id}
                        </NavLink>
                      </Td>
                      <Td width={10} modifier="truncate" columnKey="type">
                        {item.type}
                      </Td>
                      <Td
                        width={20}
                        modifier="truncate"
                        columnKey="vulnerabilityID"
                      >
                        {item.vulnerabilityID}
                      </Td>
                    </Tr>
                    {isCellExpanded(item) ? (
                      <PFTr isExpanded>
                        <PFTd colSpan={7}>
                          <div className="pf-v5-u-m-md">
                            <ExpandableRowContent>
                              Something?
                            </ExpandableRowContent>
                          </div>
                        </PFTd>
                      </PFTr>
                    ) : null}
                  </Tbody>
                );
              })}
            </ConditionalTableBody>
          </Table>

          <Pagination
            variant="bottom"
            isCompact
            widgetId="vulnerability-pagination-bottom"
          />
        </div>
      </PageSection>
    </>
  );
};
